Schnittstellendefinition für die Kommunikation zwischen Java Server und Javascript Client:
Alle Eventnamen außer den Vorgegebenen!

Java -> JavaScript:
     UPDATEKARTEN: JSON Array mit den Karten, die der entsprechende Spieler auf der Hand hat (String Zahlenwerte und "Joker" für Joker)

     UPDATESPIELFELD: JSON Map<String, Map<String, String>>
     	{"1_0#EreigniskarteSteinOffen": "1",       Flag ist 0 oder 1
         "1_0#Kobold1-Farbe": "0",
         "1_0#Kobold1-Nummer": "0",
         "1_0#Kobold2-Farbe": "0",
         "1_0#Kobold2-Nummer": "0",
         ......
         "d0_0#Kobold1-Farbe": "ROT";
         "d0_0#Kobold1-Nummer": "3";
         "d0_1#Kobold1-Farbe": "ROT";
		 ......	
		 }

     UPDATESPIELZUSTAND: JSON Map<String, Map<String, String>>
        {"RotAktiv": "1",       Flag ist 0 oder 1 und kennzeichnet, ob diese Farbe mitspielt
         "RotFokus": "0",       Flag ist 0 oder 1 und kennzeichnet, ob diese Farbe gerade an der Reihe ist
         "RotBistDu": "0",      Flag ist 0 oder 1 und kennzeichnet, ob man diese Farbe ist
         "RotSteine: "2",       Flag ist 0, 1 oder 2 und hält die Anzahl der Steine, die der Spieler besitzt (bei Raben auch negative Zahlen bis zu -3!
         "GruenAktiv": "", ...
         "GelbAktiv": "", ...
         "BlauAktiv": "", ...
         "GrauAktiv": "" ...}

     PUSHINFOTXT: Einfacher String, der dann im Infofeld angezeigt wird. (Informiert z.B. Mitspieler über Aktionen eines Spielers (Ereigniskarten etc.))
                    AUßERDEM Ausgabe für Errors(aufgetretene Exceptions)!

     EREIGNISANFRAGE: JSON Map<String, String> Im folgenden alle möglichen Zusammensetzungen der Map:
        {"Ereignis": "Fliegende Karte", "RestlicheZuege": "2"} Restliche Züge ist 1, wenn man mit der 3. Karte auf das Ereignis kommt, sonst mit der 2. Karte, also 2 Restliche Züge
                   (WICHTIG, unmittelbar hiernach muss Updatekarten gesendet werden, enthalten sind alle Karten, die noch nicht gelegt wurden und alle die noch nicht ausgeführt wurden,
                    bevor das Ereignis eintrat. Natürlich auch inklusive der neuen Karte)
        {"Ereignis": "Rabe"}

     FELDERANBIETEN: Array mit Koordinaten
        [layer, position, layer, position, layer, position, layer, position...]

     FELDDREHEN: Keine weiteren Daten. Feld muss gedreht werden.


JavaScript -> Java: (Immer eine Map<String, String> als JSON; "Eventname" ist immer der Key zum Eventnamen. Andere Keys beinhalten Daten.)
     KARTENLEGEN Bsp:
        {"Eventname": "KARTENLEGEN",
         "karte1Typ": "Normal",
         "karte2Typ": "Joker",
         "karte3Typ": "Null",
         "karte1Wert": "2",
         "karte2Wert": "5",
         "karte3Wert": "Null"}

     KARTENTAUSCHEN Bsp:
         {"Eventname": "KARTENTAUSCHEN",
          "karte1": "1",
          "karte2": "2",
          "karte3": "Joker",
          "karte4": "Null",
          "karte5": "Null"}

     EREIGNISANTWORT: JSON Map<String, String> Im folgenden alle möglichen Zusammensetzungen der Map:
         {"Eventname": "EREIGNISANTWORT", "Ereignis": "Fliegende Karte",
          "karte1Typ": "Null",
          "karte2Typ": "Null",
          "karte1Wert": "Null",
          "karte2Wert": "Null"}
         {"Eventname": "EREIGNISANTWORT", "Ereignis": "Rabe", "Spieler": "Rot"} Farbe das Spielers, auf den der Rabe angewendet werden soll.

     FELDAUSWAEHLEN: JSON Map<String, String>
         {"Eventname": "FELDAUSWAEHLEN",
          "layer": "2"],
          "position": "30"]}

     EREIGNISKARTEFLIP: JSON Map<String, String>
         {"Eventname": "EREIGNISKARTEFLIP",
          "layer": "2"],
          "position": "30"]}



Ereigniskarten INFO:
    Kristallkugel: Ausführung im Spielfeld. (Klickbare Ereignisplättchen)               @Kevin Nocon
    Unwetter: Ausführung in der Logik, effekt dann im Spielfeld sichtbar.               @Logik
    Fliegende Karte: Ausführung im Aktionsfeld                                          @Kevin Kreps
    Rabe: Ausführung im Aktionsfeld                                                     @Kevin Kreps
    Geheimgang: Ausführung in der Logik (Achtung sofort, also sobald Feld frei wird)    @Logik
    Fallgrube: Analog zu Geheimgang                                                     @Logik
    Schreckgespenst: Ausführun in der Logik                                             @Logik